;; skeleton - A project template generated by ahungry-fleece
;; Copyright (C) 2016 Your Name <skeleton@example.com>
;;
;; This program is free software: you can redistribute it and/or modify
;; it under the terms of the GNU Affero General Public License as published by
;; the Free Software Foundation, either version 3 of the License, or
;; (at your option) any later version.
;;
;; This program is distributed in the hope that it will be useful,
;; but WITHOUT ANY WARRANTY; without even the implied warranty of
;; MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
;; GNU Affero General Public License for more details.
;;
;; You should have received a copy of the GNU Affero General Public License
;; along with this program.  If not, see <http://www.gnu.org/licenses/>.

;;;; skeleton.run.tests.lisp

(in-package #:cl-user)

(defpackage skeleton.run.tests
  (:use :cl
        :skeleton.lib.stub
        :af.lib.ansi-colors
        :af.lib.coverage
        :af.lib.testy)
  (:export :main))

(in-package #:skeleton.run.tests)

(defparameter *base-directory* (asdf:system-source-directory :skeleton))

(defun main ()
  "Begin the tests!"
  ;; See if we're in the shell environment or not (SLIME will use 'dumb' here)
  (af.lib.coverage:with-coverage :skeleton
    (unless (and (sb-ext:posix-getenv "AF_LIB_TESTY_COLORIZE")
                 (> (length (sb-ext:posix-getenv "AF_LIB_TESTY_COLORIZE")) 0))
      (setf af.lib.ansi-colors:*colorize-p* nil))

    (if (suite
         "skeleton.lib"

         (desc
          "skeleton.lib.stub"

          (it "Should echo the input"
              (eq 3 (skeleton.lib.stub:echo 3)))
          )
         ) ;; end suite
        (setf sb-ext:*exit-hooks* (list (lambda () (sb-ext:exit :code 0))))
        (setf sb-ext:*exit-hooks* (list (lambda () (sb-ext:exit :code 1)))))

    ;; Produce a report of coverage
    ;; @todo Change this to CLI based output
    (with-open-stream (*error-output* (make-broadcast-stream))
      (sb-cover:report (merge-pathnames #P"report/" *base-directory*)))

    (af.lib.coverage:report-json (merge-pathnames #P"report/" *base-directory*))
    (with-color :cyan
      (format t "Coverage report generated in: ~a~%" (merge-pathnames #P"report/" *base-directory*)))

    )
  )

;;; "skeleton.run.tests" goes here. Hacks and glory await!
